@using MusicAuthenticationSystem.Data
@inject PianoService pianoService
@inject IJSRuntime _jsRuntime
@inject UserRepository UserRepo
@inject CreationRepository  CreationRepo

<p>Playback speed</p>
<div class="row_bg_light">
    @foreach (var speed in new[] { PlaybackSpeed.slow, PlaybackSpeed.med, PlaybackSpeed.fast })
    {
        <input type="radio" id="sc" name="choice" value="@speed" checked="@PlaybackSpeed.fast" @onchange="@(() => { speedChoice = speed; })" />
        <label for="sc">@speed.ToString().ToUpper()</label>
    }

    @if (!isLogin && !isFirst)
    {
        <button @onclick="(() => ChangeState())">@GetMelodyState()</button>
    }

    <button @onclick="(() => PlayBack((int) speedChoice))">Playback</button>
    <button @onclick="(() => ClearPiano(isFirst, false))">Clear Music</button>
    @if (!isDone)
    {
        <button @onclick="(()=> ConfirmNotes())">Confirm Melody</button>
        <p hidden="@messageHandler">@msg</p>
    }
    @if (isDone)
    {
        <button @onclick="(() => Retry(isFirst))">Start over</button>
    }
    @if (isDone && !isLogin)
    {
        <button class="btn btn-primary mb-1" @onclick="(() => SubmitMelody())">Confirm Melody</button>
    }
</div>

<div class="row_bg_light">
    @foreach (var pk in pianoService.PianoNotes())
    {
        <audio id=@pk src=@CreatePath(pk) />
        <button class=@GetNoteClass(pk) @onclick="(() => PlaySound(pk, isFirst))">@GetNoteName(pk)</button>
    }
</div>

@if (!isLogin)
{
    <div class="row_bg_light">
        @foreach (var ck in GetMeloKey())
        {
            <button @onclick="@(() => RemoveTone(ck))">@GetNoteName(ck.Value.Key)</button>
        }
    </div>
}

@code {
    [Parameter]
    public bool isLogin { get; set; }
    private string path = "../PianoResources/";
    private enum PlaybackSpeed { slow = 750, med = 500, fast = 250 };
    private PlaybackSpeed speedChoice = PlaybackSpeed.fast;
    private Dictionary<int, KeyValuePair<string, int>> melokey = new Dictionary<int, KeyValuePair<string, int>>();
    private Dictionary<int, KeyValuePair<string, int>> confirmMelokey = new Dictionary<int, KeyValuePair<string, int>>();
    private User user = new User();
    private string msg = "";
    private bool messageHandler = true;
    private bool isDone = false;
    private bool isFirst = true;
    private bool isFirstState = true;
    private int index = 0;

    //---------------------- *** Piano functionality starts here *** ----------------------
    private async Task PlaySound(string note, bool isFirst)
    {
        if (isFirst)
        {
            StoreNotes(note, melokey, (int)speedChoice);
        }
        else
        {
            StoreNotes(note, confirmMelokey, (int)speedChoice);
        }

        await _jsRuntime.InvokeAsync<string>("PlayAudio", note);
    }

    private async Task PlayBack(int speed)
    {
        Dictionary<int, KeyValuePair<string, int>> notes =
            new Dictionary<int, KeyValuePair<string, int>>();
        if (!isLogin)
        {
            notes = isFirstState ? melokey : confirmMelokey;
        }
        else
        {
            notes = melokey;
        }

        pianoService.StopTimer();
        foreach (var n in notes)
        {
            int noteLength = n.Value.Value == 1000 ? n.Value.Value : speed;
            await PlayBackAsync(n.Value.Key, noteLength);
        }
    }

    private void ClearPiano(bool isFirst, bool willRetry)
    {
        if (willRetry)
        {
            melokey.Clear();
            confirmMelokey.Clear();
            index = 0;
            isFirstState = true;

        }
        else if (isFirst)
        {
            melokey.Clear();
            index = 0;
        }
        else
        {
            confirmMelokey.Clear();
            index = 0;
        }
    }

    private async Task PlayBackAsync(string note, int time)
    {
        await _jsRuntime.InvokeAsync<string>("PlayAudio", note);
        await Task.Delay(time);
    }

    private string CreatePath(string source)
    {
        return path + source + ".mp3";
    }

    private string GetNoteClass(string note)
    {
        return note.Contains("s") ? "blackNote" : "whiteNote";
    }

    private string GetNoteName(string note)
    {
        string rep = note.Replace("s", "#");
        return rep.ToUpper();
    }

    private void ConfirmNotes()
    {
        if (IsEightMelodyNote(GetPassword(melokey)))
        {
            if (isLogin) { PianoLoginPass(); }
            isFirst = false;
            ChangeState();
            isDone = true;
            index = 0;
        }
        else
        {
            messageHandler = false;
            msg = "Melody must be at least eight notes!";
        }
    }

    private void Retry(bool first)
    {
        ClearPiano(first, true);
        pianoService.StartOver();
        isFirst = true;
        isDone = false;
        messageHandler = true;
    }

    private bool IsEightMelodyNote(string melody)
    {
        string m = Regex.Replace(melody, @"[\d]*s*", "");
        return m.Length >= 8;
    }

    private void StoreNotes(string note, Dictionary<int, KeyValuePair<string, int>> notes, int speedChoice)
    {
        int length = notes.Count();
        int prev = notes.Count() - 1;
        int n = pianoService.StartNote(speedChoice);
        int noteLength = n >= 1000 ? 1000 : n;

        if (length != 0)
        {
            notes[prev] = new KeyValuePair<string, int>(notes[prev].Key, noteLength);
        }

        notes.Add(index, new KeyValuePair<string, int>(note, noteLength));
        index++;
    }

    private void ChangeState()
    {
        if (isFirstState)
        {
            isFirstState = false;
        }
        else
        {
            isFirstState = true;
        }
    }

    private string GetMelodyState()
    {
        return isFirstState ? "First Melokey" : "Second Melokey";
    }

    private void RemoveTone(KeyValuePair<int, KeyValuePair<string, int>> note)
    {
        int n = note.Key;
        Dictionary<int, KeyValuePair<string, int>> mkey = GetMeloKey();
        mkey.Remove(note.Key);

        for (; n < mkey.Count; n++)
        {
            var temp = mkey[n + 1];
            mkey.Add(n, temp);
            mkey.Remove(n + 1);
        }

        index = n;
    }

    private Dictionary<int, KeyValuePair<string, int>> GetMeloKey()
    {
        if (isFirst)
        {
            return melokey;
        }
        else
        {
            return confirmMelokey;
        }
    }

    //---------------------- *** Login & Creation functions *** ----------------------

    private string GetPassword(Dictionary<int, KeyValuePair<string, int>> notes)
    {
        StringBuilder meloPass = new StringBuilder();
        foreach (var n in notes)
        {
            meloPass.Append(n.Value.Key);
        }

        return meloPass.ToString();
    }

    private void PianoLoginPass()
    {
        pianoService.SaveNote(GetPassword(melokey));
    }

    private void SubmitMelody()
    {
        pianoService.SavePass(GetPassword(melokey), GetPassword(confirmMelokey));
    }
}
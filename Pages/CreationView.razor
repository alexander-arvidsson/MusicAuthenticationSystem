@page "/create"

@using MusicAuthenticationSystem.Data
@inject UserRepository UserRepo
@inject CreationRepository  CreationRepo
@inject PianoService pianoService
@inject NavigationManager navManager

<h2>Welcome, please enter a new username and melokey.</h2>

<div class="row m-4">
    <div class="col-5 bg-light m-2 justify-content-start">
        <div class="p-3 mb-3 bg-dark text-white text-center">
            Register account
        </div>
        <div class="col-5 bg-light m-2 justify-content-start">
            <EditForm Model="@user">
                <label for="username">Username</label>
                <input type="text" id="username" @bind-value="@user.Username" />
            </EditForm>
        </div>
        <div class="col-10 bg-light m-2 justify-content-start">
            <button class="btn btn-primary mb-1" @onclick="(() => Create())">Confirm and Submit</button>
            <p hidden="@messageHandler">@msg</p>
        </div>
    </div>
</div>
<PianoView></PianoView>

@code {
    private User user = new User();
    private string msg = "";
    private bool messageHandler = true;

    private async Task Create()
    {
        string userName = user.Username;
        string firstPass = pianoService.firstPass;
        string secondPass = pianoService.secondPass;

        if(userName == null || userName == "")
        {
            msg = "Username cannot be empty!";
            messageHandler = false;
        }
        else if (PasswordIsNull(firstPass, secondPass))
        {
            msg = "Both melokeys must first be confirmed!";
            messageHandler = false;
        }
        else if (SamePasswords(firstPass, secondPass))
        {
            messageHandler = false;
            bool succesful = await CreationRepo.CreateUserAsync(user, firstPass);
            await CreationResults(succesful);
        }
    }

    private async Task CreationResults(bool succesful)
    {
        if(succesful)
        {
            msg = "Account is created! Will redirect in a few seconds.";
            await Task.Delay(3000);
            pianoService.StartOver();
            navManager.NavigateTo("/");

        } else
        {
            msg = "Username already exists! Please create a new username";
        }
    }

    private bool SamePasswords(string firstPass, string secondPass)
    {
        if (firstPass.Equals(secondPass))
        {
            user.Password = firstPass;
            return true;
        }
        else
        {
            msg = "Melokeys do not match!";
            messageHandler = false;
            return false;
        }
    }

    private bool PasswordIsNull(string first, string second)
    {
        string firstPass = pianoService.firstPass;
        string secondPass = pianoService.secondPass;

        return firstPass == null || secondPass == null;
    }
}